<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:LogicDiagram3000.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:logicV="clr-namespace:LogicDiagram3000.Views.logicScheme"
		xmlns:conectors="clr-namespace:LogicDiagram3000.Models.Connectors"
		xmlns:chip="clr-namespace:LogicDiagram3000.Models.logicChip"
		xmlns:conv="clr-namespace:LogicDiagram3000.Models.Converters"
		xmlns:views="clr-namespace:LogicDiagram3000.Views"
		mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
		Width="800" Height="450"
        x:Class="LogicDiagram3000.Views.MainWindow"
        Icon="/Assets/avalonia-logo.ico"
        Title="LogicDiagram3000"
		KeyDown="MyKeyDown"
		>
	
    <Design.DataContext>
        <vm:MainWindowViewModel/>
    </Design.DataContext>
	<Window.Resources>
		<conv:StringToThicknessConverter x:Key="stringToThicknessConverter"/>
		<conv:CanvasListToInListConverter x:Key="canvasListToInListConverter"/>
		<conv:CanvasListToOutListConverter x:Key="canvasListToOutListConverter"/>
	</Window.Resources>
	<Panel>
	<Grid RowDefinitions="*,*,*" IsVisible="{Binding IsVisibleHelloView}">
		<Button HorizontalAlignment="Center" Grid.Row="0" Content="Создать" Click="CreateProject"/>
		<Button HorizontalAlignment="Center" Grid.Row="1" Content="Открыть" Click="LoadXml"/>
		<Button HorizontalAlignment="Center" Grid.Row="2" Content="Выйти" Click="Exit"/>
	</Grid>
	<Grid RowDefinitions="0.1*,*" Height="{Binding $parent[Window].Height}" ShowGridLines="True" IsVisible="{Binding IsVisibleProjectView}">
		<Grid Width="{Binding $parent[Window].Width}" Grid.Row="0" ColumnDefinitions="*,*,*,*,*,*,*,*,*,*">
			<Menu Grid.Column="0">
				<MenuItem Header="Меню">
					<MenuItem Header="Создать" Click="CreateSchame"/>
					<MenuItem Header="Открыть" Click="LoadXml"/>
					<MenuItem Header="Сохранить" Click="SaveXml"/>
					<MenuItem Header="Выйти" Click="Exit"/>
				</MenuItem>
			</Menu>			
			<RadioButton Grid.Column="1" GroupName="Chip" IsChecked="{Binding InChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/In.png"/>
			</RadioButton>
			<RadioButton Grid.Column="2" GroupName="Chip" IsChecked="{Binding AddChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/And.png"/>
			</RadioButton>
			<RadioButton Grid.Column="3" GroupName="Chip" IsChecked="{Binding OrChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/Or.png"/>
			</RadioButton>
			<RadioButton Grid.Column="4" GroupName="Chip" IsChecked="{Binding NotChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/Not.png"/>
			</RadioButton>
			<RadioButton Grid.Column="5" GroupName="Chip" IsChecked="{Binding XorChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/Xor.png"/>
			</RadioButton>
			<RadioButton Grid.Column="6" GroupName="Chip" IsChecked="{Binding DemultiplexerChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/Demultiplexer.png"/>
			</RadioButton>
			<RadioButton Grid.Column="7" GroupName="Chip" IsChecked="{Binding IndicatorChipDraw}">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/Indicator.png"/>
			</RadioButton>
			<RadioButton Grid.Column="8" GroupName="Chip">
				<Image HorizontalAlignment="Left" Source="/Assets/Image/kyrsor.png"/>
			</RadioButton>
		</Grid>
		<Grid Width="{Binding $parent[Window].Width}" Grid.Row="1" ColumnDefinitions="0.2*,*,0.2*">
			
			<ListBox Grid.Column="0" Items="{Binding SchemeList}" SelectedItem="{Binding SelectedScheme}" DoubleTapped="OnDoubleTapped">
				<ListBox.ItemTemplate>
					<DataTemplate>
						<TextBox Text="{Binding Name}"/>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
			
			<ItemsControl Grid.Column="1"
						  Items="{Binding CanvasList}"
						  HorizontalAlignment="Stretch"
						  VerticalAlignment="Stretch"
						  PointerPressed="PointerPressedOnCanvas"
						  >
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<Canvas KeyDown="MyKeyDown" Name="canvas" Height="{Binding $parent[ItemsControl].Height}" Width="{Binding $parent[ItemsControl].Width}" Background="Aqua"/>
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
				
				<ItemsControl.DataTemplates>
					<DataTemplate DataType="{x:Type chip:AndChip}">
						<logicV:AndChipView Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:OrChip}">
						<logicV:OrChipView Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:NotChip}">
						<logicV:NotChipView Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:XorChip}">
						<logicV:XorChipView Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:DemultiplexerChip}">
						<logicV:DemultiplexerChipView Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:InChip}">
						<Panel Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" >
							<logicV:InChipView Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
							<Panel Height="50" Width="50">
								<TextBox Text="{Binding IsSignalTrue}"/>
							</Panel>
						</Panel>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:IndicatorChip}">
						<logicV:IndicatorChipView Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" IndicatorChesk="{Binding In1}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
					<DataTemplate DataType="{x:Type conectors:Connector}">
						<Panel Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" >
							  <Line 
							  StartPoint="{Binding StartPoint}"
							  EndPoint="{Binding EndPoint}"
							  StrokeThickness="5"
							  Stroke="Yellow"/>
						</Panel>
					</DataTemplate>
					<DataTemplate DataType="{x:Type chip:Scheme}">						
						<views:SchameView InList="{Binding CanvasList, Converter={StaticResource canvasListToInListConverter}}" OutList="{Binding CanvasList, Converter={StaticResource canvasListToOutListConverter}}" CastomText="{Binding Name}" Focusable="True" IsFocused="{Binding IsFocused, Mode=OneWayToSource}" Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"/>
					</DataTemplate>
				</ItemsControl.DataTemplates>
			
			</ItemsControl>
			
			<ListBox Grid.Column="2" Items="{Binding CanvasList}">
				<ListBox.ItemTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding TupeChip}"/>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>
	</Grid>
	</Panel>
</Window>